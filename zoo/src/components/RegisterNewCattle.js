import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from 'react-native';
import CheckBox from '@react-native-community/checkbox';
import { Picker } from '@react-native-picker/picker';
import firebase from '../components/firebase';
import CustomAlert from './CustomAlert';

const RegisterNewCattle = ({ isVisible, onRegister, onCancel }) => {
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [breed, setBreed] = useState('');
  const [isMale, setIsMale] = useState(true);
  const [isPregnant, setIsPregnant] = useState(false);
  const [isFertile, setIsFertile] = useState(true);
  const [customAlertVisible, setCustomAlertVisible] = useState(false);
  const [customAlertMessage, setCustomAlertMessage] = useState('');
  const [cattleId, setCattleId] = useState('');
  useEffect(() => {
    // Disable pregnancy for male cattle
    if (isMale) {
      setIsPregnant(false);
    }
  }, [isMale]);

  const handleRegister = async () => {
    if (!name || !age || !breed) {
      setCustomAlertMessage('Error', 'Please fill in all fields.');
      setCustomAlertVisible(true);
      return;
    }
  
    try {
      const user = firebase.auth().currentUser;
      if (user) {
        const cattleCollection = firebase.firestore().collection('cattle');
        const newCattle = {
          name,
          age,
          breed,
          isMale,
          isPregnant,
          isFertile,
          userId: user.uid,
        };
  
        // Add the new cattle directly to the main cattle collection and get the autogenerated ID
        const docRef = await cattleCollection.add(newCattle);
  
        // Update the newCattle object with the autogenerated ID
        newCattle.id = docRef.id;
  
        onRegister(newCattle);
        clearForm();
        setCustomAlertMessage('Success', 'Cattle registered successfully.');
        setCustomAlertVisible(true);
      } else {
        setCustomAlertMessage('Error', 'User not found. Please log in.');
        setCustomAlertVisible(true);
      }
    } catch (error) {
      setCustomAlertMessage('Error', 'Failed to register cattle. Please try again later.');
      setCustomAlertVisible(true);
      console.error('Error registering cattle:', error.message);
    }
  };
  
  const clearForm = () => {
    setName('');
    setAge('');
    setBreed('');
    setIsMale(true);
    setIsPregnant(false);
    setIsFertile(true);
  };

  const handleonCancel = () => {
    onCancel();
    clearForm();
  };

  if (!isVisible) {
    return null;
  }

  return (
    <ScrollView>
      <View style={styles.card}>
        <Text style={styles.title}>Register New Cattle</Text>
        <Text style={styles.label}>Cattle ID:</Text>
        <TextInput
          style={styles.inputReadOnly}
          value={cattleId}
          editable={false}
        />
        <TextInput
          placeholder="Name"
          style={styles.input}
          value={name}
          onChangeText={setName}
        />
        <TextInput
          placeholder="Age"
          style={styles.input}
          value={age}
          onChangeText={setAge}
        />
        <View style={styles.pickerContainer}>
          <Text style={styles.buttonText1}>Breed:</Text>
          <Picker
            selectedValue={breed}
            onValueChange={(itemValue) => setBreed(itemValue)}
            style={styles.picker}
          >
            <Picker.Item label="Select Breed" value="" />
            <Picker.Item label="Fresian" value="Fresian" />
            <Picker.Item label="Jersey" value="Jersey" />
            <Picker.Item label="Guernsey" value="Guernsey" />
            <Picker.Item label="Ayrshire" value="Ayrshire" />
            <Picker.Item label="Holstein" value="Holstein" />
            <Picker.Item label="Brown swiss" value="Brown swiss" />
            <Picker.Item label="Red$white" value="Red$white" />
            {/* Add more breed options */}
          </Picker>
        </View>
        <View style={styles.checkBoxContainer}>
          <Text style={styles.buttonText1}>Gender:</Text>
          <CheckBox
            disabled={false}
            value={isMale}
            onValueChange={() => setIsMale(!isMale)}
          />
          <Text style={styles.buttonText1}>Male</Text>
          <CheckBox
            disabled={false}
            value={!isMale}
            onValueChange={() => setIsMale(!isMale)}
          />
          <Text style={styles.buttonText1}>Female</Text>
        </View>
        <View style={styles.checkBoxContainer}>
          <Text style={styles.buttonText1}>Pregnant?</Text>
          <CheckBox
            disabled={isMale} // Disable pregnancy for male cattle
            value={isPregnant}
            onValueChange={() => setIsPregnant(!isPregnant)}
          />
        </View>
        <View style={styles.checkBoxContainer}>
          <Text style={styles.buttonText1}>Fertile?</Text>
          <CheckBox
            disabled={false}
            value={isFertile}
            onValueChange={() => setIsFertile(!isFertile)}
          />
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.registerButton} onPress={handleRegister}>
            <Text style={styles.buttonText}>Register</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.backButton} onPress={handleonCancel}>
            <Text style={styles.buttonText}>Back</Text>
          </TouchableOpacity>
        </View>
        <CustomAlert
          visible={customAlertVisible}
          message={customAlertMessage}
          onClose={() => setCustomAlertVisible(false)}
        />
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  inputReadOnly: {
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 8,
    padding: 10,
    marginBottom: 10,
    backgroundColor: '#E1E9F0', // Add a background color to indicate read-only
  },
  card: {
    padding: 20,
    backgroundColor: 'white',
    borderRadius: 8,
    marginBottom: 20,
  },
  buttonText: {
    textAlign: 'center',
    color: 'black',
    fontWeight: 'bold',
  },
  buttonText1: {
    color: 'black',
    fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 8,
    padding: 10,
    marginBottom: 10,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    color: 'black',
  },
 /*  picker: {
    backgroundColor: '#E1E9F0',
    borderRadius: 8,
    borderWidth: 40,
    borderColor: 'black',
    color: 'black',
    paddingVertical: 5,
    paddingHorizontal: 10,
  },
  pickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  }, */
  picker: {
    backgroundColor: '#E1E9F0',
    borderRadius: 8,
    borderWidth: 3, // Adjust the border width as needed
    borderColor: 'black',
    color: 'black',
    paddingVertical: 5,
    paddingHorizontal: 10,
    width:280,
  },
  pickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    width:200,
  },
  checkBoxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  backButton: {
    backgroundColor: '#ccc',
    borderRadius: 8,
    padding: 10,
    flex: 1,
    marginRight: 5,
    marginTop: 10,
  },
  registerButton: {
    backgroundColor: '#E1E9F0',
    borderRadius: 8,
    padding: 10,
    marginTop: 10,
    width: 160,
    marginRight: 15,
  },
});

export default RegisterNewCattle;
